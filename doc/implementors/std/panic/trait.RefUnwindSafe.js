(function() {var implementors = {};
implementors["leetcode"] = [{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for Walker&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TreeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleTreeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()